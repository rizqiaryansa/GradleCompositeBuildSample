def startTime = 0
def endTime = 0
def resultTime = 0
def nanoTime = 1000000

task("enableComposite") {
    group = 'Tools'
    description = "Enable scan composite build"
    doLast {
        new File("$rootDir/.compositeScan-enable").createNewFile()
    }
}

task("disableComposite") {
    group = 'Tools'
    description = "disable scan composite build"
    doLast {
        File fileComposite = new File("$rootDir/.compositeScan-enable")
        if (fileComposite.exists()) {
            fileComposite.delete()
        }
    }
}
if (new File("${rootDir}/.compositeScan-enable").exists()) {
    startTime = System.nanoTime()
    def fileTreeComposite = fileTree(dir: '.', include: '**/settings.gradle')
    fileTreeComposite.each {    file ->
        def path = file.path.toString().replace("/settings.gradle", "");
        if (!"$rootDir".equals("${path}")) {
            def lastPaths = path.replace("$rootDir/", "").replace("\"", "").trim().split("/")
            def lastPath = lastPaths[lastPaths.size() - 1]
            task("enable${lastPath}") {
                group = 'Tools'
                description = "Enable ${lastPath} composite build"
                doLast {
                    new File("${path}/.composite-enable").createNewFile()
                }
            }
            task("disable${lastPath}") {
                group = 'Tools'
                description = "Disable ${lastPath} composite build"
                doLast {
                    File fileComposite = new File("${path}/.composite-enable")
                    if (fileComposite.exists()) {
                        fileComposite.delete()
                    }
                }
            }
        }
    }

    def endT = System.nanoTime()
    def diff = (endT - startTime)
    def resultDiff = diff / nanoTime
//    resultTime += totalTime
    println("Create task composite build, Time : $diff ns or $resultDiff ms")
}