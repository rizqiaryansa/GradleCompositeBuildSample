task("enableComposite") {
    group = 'CompositeEnabler'
    description = "Enable scan composite build"
    doLast {
        new File("$rootDir/.compositeScan-enable").createNewFile()
    }
}

task("disableComposite") {
    group = 'CompositeDisabler'
    description = "disable scan composite build"
    doLast {
        File fileComposite = new File("$rootDir/.compositeScan-enable")
        if (fileComposite.exists()) {
            fileComposite.delete()
        }
    }
}

class Benchmarking {
    def what, startTime, endTime

    Benchmarking (what) { this.what = what }

    def start() { startTime = System.nanoTime() }

    def stop() { endTime = System.nanoTime() }

    def print() {
        def diff = (endTime - startTime)
        def msDiff = Math.floor(diff / 1000000).toInteger()
        def nsDiff = diff - msDiff * 1000000

        println "$what takes ${((msDiff != 0) ? "${msDiff} ms ": "")}${nsDiff} ns"
    }
}

def registerEnablerDisablerCompositeTasks(projectsPath) {
    def benchmark = new Benchmarking("Creating enabler and disabler tasks")
    benchmark.start()

    projectsPath.each { path ->
        if (rootDir.path != path) {
            def lastPaths = path.replace("$rootDir/", "").replace("\"", "").trim().split("/")
            def projectName = lastPaths[lastPaths.size() - 1]
            registerEnablerCompositeTask(path, projectName)
            registerDisablerCompositeTask(path, projectName)
        }
    }

    benchmark.stop()
    benchmark.print()
}

def registerEnablerCompositeTask(path, projectName) {
    tasks.register("enable${projectName}") { task ->
        task.group = 'CompositeEnabler'
        task.description = "Enable ${projectName} composite build"
        task.doLast {
            new File("${path}/.composite-enable").createNewFile()
        }
    }
}

def registerDisablerCompositeTask(path, projectName) {
    tasks.register("disable${projectName}") { task ->
        task.group = 'CompositeDisabler'
        task.description = "Disable ${projectName} composite build"
        task.doLast {
            File fileComposite = new File("${path}/.composite-enable")
            if (fileComposite.exists()) {
                fileComposite.delete()
            }
        }
    }
}

if (new File("${rootDir}/.compositeScan-enable").exists()) {
    def paths = new ArrayList<String>()
    def iterator = gradle.ext.compositeProjects.entrySet().iterator()
    while (iterator.hasNext()) {
        def pair = iterator.next()
        paths.add(pair.key)
    }

    registerEnablerDisablerCompositeTasks(paths)
}