import java.util.concurrent.ForkJoinPool
import java.util.concurrent.RecursiveAction
import java.util.concurrent.RecursiveTask

// save scanning result to gradle object extra property so that we can access it later at composite_build.gradle
gradle.ext.compositeProjects = new HashMap<String, CompositeProject>()

class CompositeProject {
    def settingsGradleFile
    def includedProjects = new HashMap<String, IncludedProject>()

    CompositeProject(File settingsFile) { this.settingsGradleFile = settingsFile }
}

class IncludedProject {
    def groupId, artifactId, moduleName, path

    IncludedProject(groupId, artifactId, moduleName, path) {
        this.groupId = groupId
        this.artifactId = artifactId
        this.moduleName = moduleName
        this.path = path
    }

    def getGradleFile() {
        def gradleFile = new File("$path/build.gradle")
        if (!gradleFile.exists()) {
            gradleFile = new File("$path/build.gradle.kts")
        }

        return gradleFile
    }
}

class ForkJoinFileProcessor extends RecursiveAction {

    static String rootDir
    static final int MAX_FILE_PER_THREAD = 50

    Map<String, CompositeProject> compositeProjects

    ForkJoinFileProcessor(Map<String, CompositeProject> compositeProjects, String rootDir) {
        this.compositeProjects = compositeProjects
        this.rootDir = rootDir
    }

    ForkJoinFileProcessor(Map<String, CompositeProject> compositeProjects) {
        this.compositeProjects = compositeProjects
    }

    @Override
    protected void compute() {
        if (compositeProjects.size() > MAX_FILE_PER_THREAD) {
            createSubTasks()
        } else {
            processFile()
        }
    }

    def createSubTasks() {
        def leftTask
        def rightTask

        def left = new HashMap<String, CompositeProject>()
        def right = new HashMap<String, CompositeProject>()

        def iterator = compositeProjects.entrySet().iterator()

        while (iterator.hasNext()) {
            def pair = iterator.next()

            if (left.size() < iterator.size() / 2) {
                left.put(pair.key, pair.value)
            } else {
                right.put(pair.key, pair.value)
            }

            if (left.size() == iterator.size() / 2 && leftTask == null) {
                leftTask = new ForkJoinFileProcessor(left)
                leftTask.fork()
            }

            if (!iterator.hasNext()) {
                rightTask = new ForkJoinFileProcessor(right)
                rightTask.fork()
            }
        }

        if (leftTask != null) leftTask.join()
        if (rightTask != null) rightTask.join()
    }

    def processFile() {
        def compositeIterator = compositeProjects.entrySet().iterator()
        while (compositeIterator.hasNext()) {
            def compositeProject = compositeIterator.next()

            if (rootDir.toString() != compositeProject.key.toString()) {
                processSettingsGradle compositeProject.key, compositeProject.value

                def includedIterator = compositeProject.value.includedProjects.entrySet().iterator()
                while (includedIterator.hasNext()) {
                    processBuildGradle includedIterator.next().value
                }
            }
        }
    }

    static def processBuildGradle(IncludedProject project) {
        project.getGradleFile().eachLine { line ->
            if (line.trim().startsWith("groupId")) {
                project.groupId = line.split(/['"]/)[1]
            } else if (line.trim().startsWith("artifactId")) {
                project.artifactId = line.split(/['"]/)[1]
            }
        }
    }

    static processSettingsGradle(path, compositeProject) {
        compositeProject.settingsGradleFile.eachLine { line ->
            if (line.startsWith("include") && !line.startsWith("includeBuild")) {
                String[] tempString = line.split(/['"]/)
                for (int i = 1; i < tempString.size(); i += 2) {
                    def includedPath = "${path}/${tempString[i].replace(":", "")}".replace("//", "/")
                    def includedProject = new IncludedProject(null, null, tempString[i], includedPath)
                    compositeProject.includedProjects.put(tempString[i], includedProject)
                }
            } else if (line.contains("projectDir")) {
                def tempString = line.split(/['"]/)
                compositeProject.includedProjects.get(tempString[1]).path = "${path}/${tempString[3]}".replace("//", "/")
            }
        }
    }
}

class Benchmarking {
    def what, startTime, endTime

    Benchmarking (what) { this.what = what }

    def start() { startTime = System.nanoTime() }

    def stop() { endTime = System.nanoTime() }

    def print() {
        def diff = (endTime - startTime)
        def msDiff = Math.floor(diff / 1000000).toInteger()
        def nsDiff = diff - msDiff * 1000000

        println "$what takes ${((msDiff != 0) ? "${msDiff} ms ": "")}${nsDiff} ns"
    }
}

def scanComposite() {
    def benchmark = new Benchmarking("Composite Scan")

    benchmark.start()

    gradle.ext.compositeProjectPath.each {
        def settingFileTree = new ArrayList<File>()
        traverse(new File(it), settingFileTree)
        settingFileTree.each {
            gradle.ext.compositeProjects.putIfAbsent(it.path.replaceAll(/\/settings.gradle|.kts/, ""), new CompositeProject(it))
        }
    }

    benchmark.stop()
    benchmark.print()
}

def processComposite() {
    def benchmark = new Benchmarking("Processing projects")
    benchmark.start()

    ForkJoinPool forkJoinPool = new ForkJoinPool()
    forkJoinPool.invoke(new ForkJoinFileProcessor(gradle.ext.compositeProjects, rootDir.path))

    benchmark.stop()
    benchmark.print()
}

def substituteBinaryDependencies() {
    def compositeIterator = gradle.ext.compositeProjects.entrySet().iterator()
    def benchmark = new Benchmarking("Processing projects")
    benchmark.start()

    while (compositeIterator.hasNext()) {
        def compositePair = compositeIterator.next()
        if (compositePair.key != rootDir.toString()) {
            if (new File("${compositePair.key}/.composite-enable").exists()) {
                includeBuild(compositePair.key) {
                    dependencySubstitution {
                        def includedIterator = compositePair.value.includedProjects.entrySet().iterator()

                        while (includedIterator.hasNext()) {
                            def includedPair = includedIterator.next()

                            if (includedPair.value.groupId != null && includedPair.value.artifactId != null) {
                                substitute module("${includedPair.value.groupId}:${includedPair.value.artifactId}") with project("${includedPair.value.moduleName}")
                            }
                        }
                    }
                }
            }
        }
    }

    benchmark.stop()
    benchmark.print()
}

def traverse(File path, ArrayList<File> settingsFiles) {
    if (path.isDirectory()) {
        if (isPathExcluded(path)) {
            path.eachFile {
                if (it.isFile()) {
                    if (it.name.matches("settings.gradle|settings.gradle.kts")) {
                        settingsFiles.add(it)
                    }
                } else if (isPathExcluded(it)) {
                    traverse(it, settingsFiles)
                }
            }
        }
    } else {
        if (path.name.matches("settings.gradle|settings.gradle.kts")) {
            settingsFiles.add(path)
        }
    }
}

def isPathExcluded(path) {
    return !path.name.matches("src|.gradle|.idea|build")
}

if (new File("$rootDir/.compositeScan-enable").exists()) {
    scanComposite()
    processComposite()
    substituteBinaryDependencies()
}